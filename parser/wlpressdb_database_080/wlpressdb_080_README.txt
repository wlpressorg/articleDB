------------------------------------------------------------------------
-- wlpressdb -- WikiLeaks Press news archive database -- version 0.80 --
------------------------------------------------------------------------

-- version 0.80 for PostgreSQL 8.3
-- 2012-02-25
-- author: Cabledrummer <jack.rabbit@cabledrum.net>

SETUP
=====
1. Create a new database with UTF8 encoding

2. Enable plpgsql if not already done:
   CREATE LANGUAGE plpgsql;

3. Execute the scripts in following order:
   - wlpressdb_080_dbdef.sql
   - wlpressdb_080_initial.sql
   - wlpressdb_080_geodata.sql
   - wlpressdb_080_media.sql


Overview
========

See wlpressdb_erd.pdf for a model overview, wlpressdb_080_dbdef.sql for 
the definitions.

Tables
------
'countries', 'regions' and 'languages' contain the geoscheme data. This 
are static data w/o need to edit.

'sessions', 'users' and 'session_cfg' are used by the session controller.
'sessions' contains the current session data. It is completely managed 
by the session controller and should not be edited.
'users' contains the data of system users with additional permissions
(i.e. wlpress staffers). The data has to be generated by admin. At 
startup there only is a user "wlpress" with the password "test".

'media' contains the data of media organisations. When an article with 
unknown media assigment is invoked from frontend, an "auxiliary" record 
is inserted. These records need to be edited/confirmed by a system user.

'articles' is the main table for article data.

'tags' and 'categories' contain the tags/keywords and categories for 
'articles', using the cross tables 'tag_cross' and 'cat_cross'.

'links' contains the related links for 'articles', w/o cross table.

'ip_blacklist' is a list of user IP addresses that are not allowed to 
submit articles, managed by admin.

'domain_blacklist' is a list of disallowed article domains (to avoid 
spam), managed by admin.

Stored procedures
-----------------

-  set_timestamps
   Trigger function, sets the columns 'created' and 'modified'

-  compact
   This function compacts a string for comparison. It is used by several 
   other function to compare strings spelling-tolerantly.

-  set_tag
   Since the tags are stored in a separate table with an additional 
   crosstable for article assigments (n:m relation) management of new 
   assigments would be laborious. To simplify this task, set_tag is 
   used for tag assignments. It cares about all possbile conditions and 
   creates a new tag if required.

-  set_category
   Manages category assigments (similar to set_tag function above) but 
   does not create new categories (since this is an admin task).

-  login, logout, check_session
   This functions are used for the session controller and should only be 
   called by the session_controller class (session.inc.php)


Triggers
========
Several tables have a column 'created' and a column 'modified'. This 
columns are auto-filled by the trigger function set_timestamps().

The table tags has a trigger tags_match that fills 'tag_match' with a 
compacted copy of 'tag', using the function set_tag_match.


Incompatible data types
=======================
The BOOLEAN data type of PSQL is not native compatible to PHP. Thus, 
an integer type ("xboolean") is used instead:

   SMALLINT NOT NULL CHECK (value IN ('0','1'))

The TIMESTAMP data type of PSQL is not native compatible to PHP. Thus, 
integer values representing Unix timestamps are used instead.
Exception: The column articles.pubdate is an ISO date (YYYYMMDD).


chk_* columns
=============
The tables 'media', 'articles' and 'links' contain 4 extra columns 
'chk_time', 'chk_erros', 'chk_status' and 'chk_msg'. These columns 
are used by a separate cronjob which frequently checks the validity 
of all links in the database in order to avoid broken/outdated links. 

   chk_time    Timestamp of last link check
   chk_erros   link check error counter
   chk_status  result of last linkcheck (code), e.g. 404
   chk_msg     result of last linkcheck (text), e.g. 'Moved Permanently'

When chk_errors is higher than 3, the record should be ommitted in the 
frontend since the link is likely invalid. From time to time the data 
should be reviewed manually.

On cabledrum (and several other servers) a similar cronjob runs once 
per minute and checks one link per execution. Thus, each link gets 
checked every few days. You can have the cronjob script when you are 
ready. (Please remind me if I forget it.)

